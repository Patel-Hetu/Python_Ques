Lab 5
CPS 109

Hetu Patel - 501215707


Question 1:

'''Write a function called helloWorld(), which prints "Hello World". 
Next write a program that calls that function once. In the same program, 
add a loop which calls the function 10 times'''

def helloWorld():
    print("Hello, World")
helloWorld()
for i in range(1,11):
    helloWorld()

Question 2:
'''Write a function hello(name), which prints "Hello" followed by the value of name. 
For example, hello('Ahmad') would print "Hello Ahmad". Write a program that asks the 
user for their name, and then uses the function to greet the person.’''

name = input("Enter your first name: ")
def hello(name):
    print("Hello",name)
hello(name)

Question 3:
'''Write a function hello(firstname, lastname), which, for example, if called with hello('John', 'Smith'), would print two lines:Hello John Smith Hello Smith, JohnUse the function in a program where you ask the user for first and last name and then call the function.'''

lastname = input("Enter your last name: ")
firstname = input("Enter your first name: ")
def hello(firstname, lastname):
    print("Hello",firstname,lastname)
    print("Hello",lastname,",",firstname)
hello(firstname, lastname)

Question 4:
'''Write a function repeatPhrase(phrase, n), which prints the given phrase n times, alternating
between lowercase and uppercase. Recall, that if aString is a string, then a.upper() is the uppercase of that string, and a.lower() is the lower case of the string. For example, repeat('The sky is blue', 5) would print:
the sky is blue
THE SKY IS BLUE the sky is blue
THE SKY IS BLUE the sky is blue’''

phrase = input("Enter the phrase: ")
n = int(input("Enter the number of times you want ot repeat the phrase: "))
def repeatPhrase(phrase, n):
    for i in range(n):
        if i%2 == 1:
            print(phrase.lower())
        else:
            print(phrase.upper())     
repeatPhrase(phrase, n)
Question 5:


Question 6:
'''Write a function perfectcube(n), which returns True if n is a perfect cube and returns False otherwise. Notice that this function is not printing anything, but rather returning True or False. The function must use exhaustive enumeration to check if n is a perfect cube. That means checking if 0**3 is n or 1**3 is n or 2**3 is n, and so on, up to where it is pointless to check further. (Instead of n, you might be checking against abs(n), since for example, -125 is a perfect cube. Use the function in a program where you ask the user for n and you print a statement like "Yes, that is a perfect cube" or "No, that number is not a perfect cube", as appropriate.'''

num = int(input("Enter a number to check whether its a perfect cube or not: "))
def perfectcube(n):
    i = 0
    while i**3 <= abs(n):
        if i**3 == abs(n):
            return True
        i += 1
    return False
if perfectcube(num):
    print("Yes,",num,"is a perfect cube")
else:
    print("No,",num,"is not a perfect cube”)

Question 7:

'''Write a function biggestOdd(), which reads in numbers from the user until the user enters 0. Then the function returns (not prints) the largest odd number that was entered. For example, if the integers were: 10, 9, 7, 12, 2, 5, 15, 100, 90, 60, 0, then the program would return 15 as the largest odd number. Similarly, if the integers were -55, -33, -10, 100, -5, 0, then the program would return -33 as the largest odd number. If there is no odd number, then the function should return 0. Use the function in a program to check that it works.'''

def biggestOdd():
    largest_odd_num = 0
    while True:
        num = int(input("Enter a number or 0 to stop: "))
        if num == 0:
            break
        if num % 2 != 0 and num > largest_odd_num:
            largest_odd_num = num
    return largest_odd_num
#now calling the function by entering various values
largest_odd_num = biggestOdd()
if largest_odd_num != 0:
    print("The largest odd number entered is", largest_odd_num)
else:
    print("No odd numbers were entered.")

Question 8:
'''Write a function biggestBuried(s), which the parameter s is a string, and the function returns the largest integer buried in the string. If there is no integer inside the string, then return 0. For example, biggestBuried('abcd51kkk3kk19ghi') would return 51, and biggestBuried('kkk32abce@@-33bb14zzz') would return 33, since the '-' character is treated like any other non digit. Note that a character is a digit if it is greater than or equal to '0' and less than or equal to '9'. Alternatively, you can use string.isdigit() to check if the string is a digit.'''

def biggestBuried(string):
    largest_int_burried = 0
    current_int = ""
    for num in string:
        if num.isdigit():
            current_int += num
        else:
            if current_int != "":
                num = int(current_int)
                if num > largest_int_burried:
                    largest_int_burried = num
            current_int = ""
    if current_int != "":
        num = int(current_int)
        if num > largest_int_burried:
            largest_int_burried = num
    return largest_int_burried
string = input("Enter a string: ")
largest_int_burried = biggestBuried(string)
if largest_int_burried != 0:
    print("The largest integer buried in the string is", largest_int_burried)
else:
    print("No integers are found in the string.”)

Question 9:
'''Write a function squareRoot(x, epsilon) that uses bisection search to return a number y that is close enough to the square root of x, so that abs(y**2 - x) < epsilon. Try out the function in a program to verify that it works properly.'''

def squareRoot(x, epsilon):
    low = 0
    high = max(1, x)
    mid = (low + high) / 2
    while abs(mid**2 - x) >= epsilon:
        if mid**2 < x:
            low = mid
        else:
            high = mid
        mid = (low + high) / 2
    return mid

x = float(input("Enter a number to find the square root of: "))
epsilon = float(input("Enter the maximum difference between the square of the mid and x: "))
y = squareRoot(x, epsilon)
print("The square root of", x, "is approximately", y)

Question 10:

def decimalToBinary(num):
    if num == 0:
        return '0'
    binary_version = ''
    while num > 0:
        binary_version += str(num % 2)
        num //= 2
    return binary_version[::-1]

for num in range(10):
    print(num,"in binary is",decimalToBinary(num))


